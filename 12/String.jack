// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack
/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int length;
    field int capacity;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (~(maxLength > 0)) {
            let maxLength = 1;
        }
        let str = Array.new(maxLength);
        let length = 0;
        let capacity = maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if (j < 0 | (length - 1) < j) {
            do Output.printString("Error: invalid index!");
            do Sys.error(1);  // Index out of bounds
        }
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if (j < 0 | (length - 1) < j) {
            do Output.printString("Error: invalid index!");
            do Sys.error(2);  // Index out of bounds
        }
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (length < capacity) {
            let str[length] = c;
            let length = length + 1;
            return this;
        } else {
            do Output.printString("String full, cannot append another character!");
            return this;
        }
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (~(length > 0)) {
            do Output.printString("String has length 0, no character to erase!");
        }
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int val, i, d;
        var boolean neg;
        let val = 0;
        let i = 0;
        let neg = false;
        
        if ((length > 0) & (str[0] = 45)) {  // Check if first char is '-'
            let neg = true;
            let i = 1;
        }
        
        while (i < length) {
            let d = str[i] - 48; // Convert char to int
            if ((d < 0) | (d > 9)) {
                if (neg) {
                    return -val;
                }
                return val;
            }
            let val = (val * 10) + d;
            let i = i + 1;
        }
        
        if (neg) {
            return -val;
        }
        return val;
    }
    

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int lastDigit, quotient;
        var char c;

        if (val < 0) {
            do appendChar(45);  // minus sign (appendix 2)
            let val = -val;
        }
        let quotient = val / 10;
        let lastDigit = val - (quotient * 10);
        let c = String.digitToChar(lastDigit);

        if (quotient > 0) {
            do setInt(quotient);
        }
        do appendChar(c);
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;  // as per appendix 5
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;  // as per appendix 5
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;  // as per appendix 5
    }

    function char digitToChar(int n) {
        if (n < 0 | 9 < n) {
            do Output.printString("Invalid digit");
            do Sys.error(8);
            return 0;
        }
        return 48 + n;
    }
}