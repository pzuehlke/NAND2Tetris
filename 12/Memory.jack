// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack
/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array RAM;  // full RAM, not just heap
    static Array heap;
    static int freeList = 0;  // linked list of available, (i.e., free) memory segments

    static int HEAP_BASE;
    static int HEAP_BOTTOM;
    static int KEYBOARD;

    /** Initializes the class. */
    function void init() {
        let HEAP_BASE = 2048;
        let HEAP_BOTTOM = 16383;   // register just before SCREEN, see p. 93
        let KEYBOARD = 24576;  // see p. 93

        let heap = HEAP_BASE;
        let heap[0] = HEAP_BOTTOM - HEAP_BASE + 1;  // heap length = (16383 - 2048 + 1)
        let heap[1] = 0;  // address of next segment

        let freeList = heap;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        if (address < 0 | address > KEYBOARD) {
            Output.printString("Error: invalid memory address!");
            Sys.error(4);  // Invalid memory address
        }
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        if (address < 0 | address > KEYBOARD) {
            Output.printString("Error: invalid memory address!");
            Sys.error(4);  // Invalid memory address
        }
        let RAM[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int prevHead;

        prevEnd = freeList;
        o[0] = prevHead;
        freeList = o - 1;
        
        return;
    }    
}
