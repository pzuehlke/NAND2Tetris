// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack
/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean color;
    static int SCREEN;
    static int KBD;

    /** Initializes the Screen. */
    function void init() {
        let color = false;
        let SCREEN = 16384;
        let KBD = 24576;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int address;
        let address = SCREEN;

        while (address < KBD) {
            do Memory.poke(address, 0);
            let address = address + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, bit, value, mask;

        if (y < 0 | y > 255 | x < 0 | x > 511) {
            do Output.printString("Invalid screen position!");
            return;
        }

        let address = SCREEN + Math.multiply(y, 32) + Math.divide(x, 16);
        let value = Memory.peek(address);
        let bit = x & 15;  // equivalent to x % 16
        let mask = Math.powerOfTwo(bit);

        if (color) {
            let value = value & (~mask);  // ~mask has 1 everywhere but at position bit
        } else {
            let value = value | mask;   //  mask has 0 everywhere but at position bit
        }
        do Memory.poke(address, value);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, dx, dy, diff, temp;
        // Switch the points if necessary to make x1 <= x2:
        if (x2 < x1) {
            let temp = x1; let x1 = x2; let x2 = temp;

            let temp = y1; let y1 = y2; let y2 = temp;
        }
        
        let dx = x2 - x1;
        let dy = y2 - y1;
        let a = 0;
        let b = 0;

        if (dx = 0) {  // vertical line
            while (Math.abs(b) < Math.abs(dy) + 1) {
                do Screen.drawPixel(x1, y1 + b);
                if (dy > 0)  {
                    let b = b + 1;
                } else {
                    let b = b - 1;
                }
            }
            return;
        }

        if (dy = 0) {  // horizontal line
            while (a < dx + 1) {
                do Screen.drawPixel(x1 + a, y1);
                let a = a + 1;
            }
            return;
        }

        let diff = 0;  // diff = a * dy - b * dx
        while ((a < dx + 1) & (Math.abs(b) < Math.abs(dy) + 1)) {
            do Screen.drawPixel(x1 + a, y1 + b);
            if (dy > 0) {
                if (diff > 0) {
                    let b = b + 1;
                    let diff = diff - dx;
                } else {
                    let a = a + 1;
                    let diff = diff + dy;
                }
            } else {  // dy < 0
                if (diff > 0) {
                    let a = a + 1;
                    let diff = diff + dy;
                } else {
                    let b = b - 1;
                    let diff = diff + dx;
                }
            }
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     *  and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int dy, temp, y;
        // Ensure first vertex of the rectangle is the one with smaller y-coordinate:
        let dy = y2 - y1;
        if (dy < 0) {
            let temp = y2; let y2 = y1; let y1 = temp;
        }
        
        let y = y1;
        while (y < y2 + 1) {
            do Screen.drawLine(x1, y, x2, y);
            let y = y + 1;
        }   
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int a, b;

        // Validate the radius:
        if (r < 0 | r > 181) {
            return;
        }
        // Check if the circle fits on the screen:
        if ((y + r) > 255 | (y - r) < 0 | (x + r) > 511 | (x - r) < 0) {
            return;
        }

        let b = - r;
        while (b < r + 1) {
            let a = Math.sqrt(Math.multiply(r, r) - Math.multiply(b, b));
            do Screen.drawLine(x - a, y + b, x + a, y + b);
            let b = b + 1;
        }

        return;
    }

}
